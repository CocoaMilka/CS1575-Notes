Data Structure : Graph
{
	- A collection of objects together with a relationship among the objects

	- Graph Theory

		- 16th Century by Leonard Euler

		- Discrete math stuffs

		- Location of objects don't matter, just relationship between them

	DEF: Graph = <V, E>

		V: Set of vertices/nodes

		E: Set of pairs <v, w> where v ∈ V and w ∈ W

			Elements in set E are called "edges"

		if E is "reflexive" the graph is called "undirected" // if <v, w> ∈ E then <w, v> ∈ E

		else the graph is called "directed" or a "digraph"

		ex) V = {A, B, C, D} E = {<B, A> <A, D> <D, C> <D, B> <C, B>}

		Vocab:
		{
			- The edge <v, v> is called a loop

			- A graph without loops is called simple

			- w is adjacent to v if <v, w> ∈ E 	// Does not guarantee it is 2 way

			- The degree of a node v is the number of vertices adjacent to v (how many arrows are going out)

			- The degree of a graph is the highest degree of a node in the graph

			- A path is a sequence of vertices <v_0, v_1, v_2, ... , v_n>

				- <v_i, v_i+1> ∈ E 	// All pairs must be in graph, cannot have path with a connection that doens't exist

				- n is the length of the path

				- a path may be empty

				- a path that does not contain a loop is called a simple loop

				- a cycle is a path <v_0, v_1, v_2, ... , v_n> where v_0 = v_n

			- "Dag": Directed Acyclic Graph

				Greek prefix A- means without (Acyclic = without cycles)

				Latin prefix Un- mean without (Undirected = without direction)

			- A graph is strongly connected if for every two vertices v and w , there exists a path from v to w // Cannot be strong connected and a Dag

			- A graph is weakly connected if for every two vertices v and w, either a path from v to w or a path from w to v exists.
		}

		Operations:
		{
			- addVertex(G, v) // or addNode(G, v)

			- addEdge(G, e)

			- neighbors(G, v) = List of all vertices adjacent to v.
		}

		Implementation
		{
			- Use a 2D boolean array, row and colum are elements. Use grid like battleship to represent pairs

			  a  b  c
			a[1][0][0]
			b[0][1][1]
			c[1][0][0]

			- 1 means row is related to column, 0 means row is not related to column.

			- Adding an edge is cheap, just flip bits.

			- Adding a vertex is expensive, need to add new row and column.

			- This is the Data Structure Adjacency Matrix

			- Adjancency matrix uses a lot of data to store 0s

				- Can use array of linked list, pointing to neighbors, This is called adjancency list

			Weighted Matrix

			- instead of boolean values in 2D array, use weights


		}
}
